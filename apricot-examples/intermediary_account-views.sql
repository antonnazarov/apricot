CREATE VIEW vw_cut_off_balance AS    select      intermediary_code,      sub_account_number,      sub_account_description,      cut_off_date,      (opening_balance_in_cents * -1) as balance_in_cents,      (cut_off_balance_in_cents * -1) as closing_balance_in_cents,     process_cut_off_date    FROM cut_off_balance    WHERE sub_account_number IS NOT NULL AND sub_account_number != 0;
CREATE VIEW vw_debt_management_balance AS      SELECT     intermediary_code,     (opening_debt_management_balance_in_cents * -1) AS balance_in_cents,     (debt_management_balance_in_cents * -1) AS closing_balance_in_cents,     process_cut_off_date,     cut_off_date AS cut_off_period     FROM cut_off_balance    WHERE sub_account_number IS NULL OR sub_account_number = 0      AND process_cut_off_date >= DATEADD(month, -6, GETDATE());
create view interest_suspension_view  as        select piv.intermediary_code, piv.dr_cr_interest,             piv.interestSuspensionStartDate as suspension_start_date,             piv.interestSuspensionEndDate as suspension_end_date from        (select tiacv.intermediary_code,              CASE when tiacv.component_name = 'interestEarned' then 'cr'             else 'dr'             END as dr_cr_interest,              tiaav.attribute_name, tiaav.date_value        from tmp_intermediary_agreement_component_view tiacv       join tmp_intermediary_agreement_attribute_view tiaav ON tiaav.intermediary_code = tiacv.intermediary_code      and tiaav.component_name = tiacv.component_name               and tiaav.attribute_name in ('interestSuspensionStartDate', 'interestSuspensionEndDate')       where tiacv.component_name in ('interestEarned', 'interestCharged')       ) tmp         pivot          ( min(date_value) for attribute_name         in ( [interestSuspensionStartDate] , [interestSuspensionEndDate])       ) piv;
CREATE VIEW vw_debt_age AS    with run_date as     (     select BATCH_RUN_DATE     from Intermediary_Common.dbo.vw_run_date     ),    cut_off_date as     (     select top 1 cp.end_date      from Intermediary_Common.dbo.calendar_period cp       join Intermediary_Common.dbo.calendar c on c.calendar_id = cp.calendar_id        and c.calendar_name = 'SALES_CALENDAR'     where cp.status in ('CURRENT', 'CUT_OFF_PROCESSING')      and end_date >= (select BATCH_RUN_DATE from run_date)     order by cp.end_date    ),    one as    (     select dm.intermediary_code,      case when (DATEDIFF(month, dm.debt_date, (select end_date from cut_off_date)) >= 4) then 4        else DATEDIFF(month, dm.debt_date,(select end_date from cut_off_date))       end as consecutive_months_in_debt     from Intermediary_Account.dbo.debt_management dm       join Intermediary_Account.dbo.tmp_intermediary_agreement_view iav on iav.intermediary_code = dm.intermediary_code        and iav.status = 'ACTIVE'     where dm.debt_management_status = 'ACTIVE'    ),    two as    (     select dm.intermediary_code,      case when max(DATEDIFF(month, dm.debt_date, dm.end_date)) >= 4 then 4         else 0       end as consecutive_months_in_debt     from Intermediary_Account.dbo.debt_management dm       join Intermediary_Account.dbo.tmp_intermediary_agreement_view iav on iav.intermediary_code = dm.intermediary_code        and iav.status = 'ACTIVE'     where dm.debt_management_status = 'INACTIVE'     group by dm.intermediary_code, dm.debt_management_status, dm.debt_date, dm.end_date     having DATEDIFF(month, dm.debt_date, dm.end_date) >= 4    )      select intermediary_code,       max(consecutive_months_in_debt) as consecutive_months_in_debt    from (     select * from one     union     select * from two    ) tmp    group by tmp.intermediary_code;
CREATE VIEW vw_business_event_batch_count AS    SELECT source_system, batch_number, count(*) AS record_count FROM source_business_event     GROUP BY source_system, batch_number;
CREATE VIEW vw_cost_centre AS  select gl_cost_center AS cost_centre,         gl_cost_center_description AS description    FROM cost_center_reference    WHERE gl_cost_center_type = 'COST_CENTER' AND gl_cost_center_is_active = 1;
CREATE VIEW vw_gl_all_active_cost_center AS   SELECT cost_centre AS cost_center_code , descr AS description    FROM tmp_cost_centre_view   WHERE (status = 'A' AND status_date <= getdate())       OR      (status = 'I' AND status_date > getdate());
CREATE VIEW vw_financial_transaction_all AS    SELECT      a.intermediary_code,      ft.financial_transaction_id,      a.sub_account_number,       CASE       WHEN ft.description NOT LIKE 'VAT%' THEN  ae.amount_in_cents * -1      ELSE 0        END as amount_in_cents,      ft.cut_off_date AS cut_off_period,       ft.transaction_date,      ft.run_date,      ft.description,      be.source_system,      CASE      WHEN (ft.program_reference = 516 AND be.intermediary_code = be.source_intermediary_code) THEN v.redirect_balance_intermediary_code       WHEN ft.program_reference = 516 THEN source_intermediary_code      ELSE be.source_system_reference     END AS source_system_reference,     ft.transaction_category_id AS transaction_category,       be.calculated_vat_applicable_indicator as vat_applicable_indicator,       CASE        WHEN ae.amount_in_cents < 0 THEN be.calculated_vat_amount_in_cents        ELSE be.calculated_vat_amount_in_cents * -1       END as vat_amount_in_cents,       be.retroactive_vat_indicator,      ber.is_manual_transaction_event,       be.business_event_type,      be.capture_timestamp     FROM account a      JOIN account_entry ae ON ae.account_id = a.account_id      JOIN financial_transaction ft on ft.financial_transaction_id = ae.financial_transaction_id      JOIN account_entry ae2 on ae2.financial_transaction_id = ft.financial_transaction_id and ae2.account_id <> a.account_id     JOIN account a2 on a2.account_id = ae2.account_id     JOIN business_event be on be.business_event_id = ft.business_event_id      JOIN business_event_reference ber on be.business_event_type = ber.business_event_type      JOIN tmp_intermediary_view v on v.intermediary_code = be.intermediary_code      WHERE       (a.sub_account_number = '101' OR (a.sub_account_number = '301' AND a2.sub_account_number is null) OR (a.sub_account_number = '301' AND a2.sub_account_number <> '101')  OR (a.sub_account_number = '102' AND a2.sub_account_number <> '101'))          AND ae.entry_type = 'NORMAL'           AND (ft.description NOT LIKE 'VAT%' or (be.amount_in_cents = 0 and vat_amount_in_cents <> 0 and ft.description LIKE 'VAT%'));
CREATE VIEW vw_business_event AS  select business_event_id, source_system, source_system_reference, cut_off_period,         amount_in_cents, vat_amount_in_cents, vat_applicable_indicator,       capture_timestamp, business_event_type    from business_event;
CREATE VIEW vw_rejection_queue AS  select rq.rejection_queue_id, rq.source_system, rq.source_system_reference,        rq.creation_timestamp, rq.business_event_type, rq.json_message, re.error_code, re.error_description   from rejection_queue rq   join rejection_error re on re.rejection_queue_id = rq.rejection_queue_id;
CREATE VIEW vw_account AS     SELECT account_number, account_description AS description, gl_cost_center_type_required AS cost_center_required FROM account_reference;
create view vw_payment as        with reference as        (select b1.business_event_type,           case        when b2.business_event_type is null then 'PAYMENT'       else 'PAYMENT_REVERSAL'       end as payment_type,        right(b1.business_event_type_description, len(b1.business_event_type_description)-24) as payment_description      from business_event_reference b1    left outer join business_event_reference b2 on b2.business_event_type_reversal = b1.business_event_type   where b1.business_event_type_description like 'Payment Control Acc%')         select be.intermediary_code,           ae.amount_in_cents *-1 as amount_in_cents,     ft.transaction_date as transfer_date,     case when r.payment_type = 'PAYMENT' then pd.bank_account_number else pr.bank_account_number end as bank_account_number,      be.cut_off_period,     ft.run_date,     r.payment_type,     ft.sundry as reference,     r.payment_description      from business_event be    join reference r on r.business_event_type = be.business_event_type       join financial_transaction ft on ft.business_event_id = be.business_event_id    join account_entry ae on ae.financial_transaction_id = ft.financial_transaction_id    join account a on a.account_id = ae.account_id and a.account_number = 'GG014'    left outer join payment_detail pd on pd.transaction_number = be.source_system_reference     left outer join payment_rejection pr on pr.transaction_number = be.source_system_reference      where be.cut_off_period >= DATEADD(month, -6, GETDATE());
CREATE VIEW vw_financial_transaction AS   SELECT      a.intermediary_code,      ft.financial_transaction_id,      a.sub_account_number,       CASE       WHEN ft.description NOT LIKE 'VAT%' THEN  ae.amount_in_cents * -1      ELSE 0        END as amount_in_cents,      ft.cut_off_date AS cut_off_period,       ft.transaction_date,      ft.run_date,      ft.description,      be.source_system,      CASE      WHEN (ft.program_reference = 516 AND be.intermediary_code = be.source_intermediary_code) THEN v.redirect_balance_intermediary_code       WHEN ft.program_reference = 516 THEN source_intermediary_code      ELSE be.source_system_reference     END AS source_system_reference,     ft.transaction_category_id AS transaction_category,       be.calculated_vat_applicable_indicator as vat_applicable_indicator,       CASE       WHEN ft.description LIKE 'FEES-%' THEN 0       WHEN ae.amount_in_cents < 0 THEN be.calculated_vat_amount_in_cents        ELSE be.calculated_vat_amount_in_cents * -1       END as vat_amount_in_cents,       be.retroactive_vat_indicator,      CASE       WHEN ft.program_reference = 513 THEN 0       ELSE ber.is_manual_transaction_event     END AS is_manual_transaction_event,       be.business_event_type,      be.capture_timestamp     FROM account a      JOIN account_entry ae ON ae.account_id = a.account_id      JOIN financial_transaction ft on ft.financial_transaction_id = ae.financial_transaction_id      JOIN account_entry ae2 on ae2.financial_transaction_id = ft.financial_transaction_id and ae2.account_id <> a.account_id     JOIN account a2 on a2.account_id = ae2.account_id     JOIN business_event be on be.business_event_id = ft.business_event_id      JOIN business_event_reference ber on be.business_event_type = ber.business_event_type      JOIN tmp_intermediary_view v on v.intermediary_code = be.intermediary_code     WHERE       (a.sub_account_number = '101' OR (a.sub_account_number = '301' AND a2.sub_account_number is null) OR (a.sub_account_number = '301' AND a2.sub_account_number <> '101')  OR (a.sub_account_number = '102' AND a2.sub_account_number <> '101'))          AND ae.entry_type = 'NORMAL'           AND (ft.description NOT LIKE 'VAT%' or (be.amount_in_cents = 0 and vat_amount_in_cents <> 0 and ft.description LIKE 'VAT%'))            AND ft.cut_off_date >= DATEADD(month, -3, GETDATE());
CREATE VIEW dbo.vw_transaction_category_summary AS   SELECT a.intermediary_code,        ft.transaction_category_id as transaction_category,        ft.cut_off_date as cut_off_period,        (sum(ae.amount_in_cents) * -1) as total_in_cents     FROM account a    JOIN account_entry ae on ae.account_id = a.account_id    JOIN financial_transaction ft on ft.financial_transaction_id = ae.financial_transaction_id    WHERE a.intermediary_code is not null and ft.cut_off_date >= DATEADD(month, -6, GETDATE())    GROUP BY a.intermediary_code, ft.transaction_category_id, ft.cut_off_date;
CREATE VIEW [dbo].[vw_nca_loan_default] AS   select intermediary_code,      cut_off_date as cut_off_period,      opening_balance,      payments_applied,      new_loan_defaults,      interest_on_loan_defaults,      closing_balance,      income_applied   from tmp_nca_loan_default;
create view dbo.vw_transfer_to_gl_account as          select be.intermediary_code, a.account_number as target_gl_account,                ae.amount_in_cents, ft.transaction_date, ft.run_date,  ft.cut_off_date as cut_off_period     from business_event be     join financial_transaction ft on ft.business_event_id = be.business_event_id     join account_entry ae on ae.financial_transaction_id = ft.financial_transaction_id     join account a on a.account_id = ae.account_id and a.account_number <> 'GG014'          where be.business_event_type in (509998, 509999)    AND ft.cut_off_date >= DATEADD(month, -6, GETDATE());
create view vw_business_acount_payments  as SELECT   ba.intermediary_code,   MAX(bae.transaction_date) as last_transaction_date,   (    SELECT TOP 1      bae2.amount_in_cents    FROM      business_account ba2     JOIN business_account_entry bae2 ON bae2.business_account_id = ba2.business_account_id    WHERE      ba2.intermediary_code = ba.intermediary_code     AND bae2.business_account_entry_status = 'BAES03'      AND ba2.business_account_status NOT IN ('BAS03')    ORDER BY      bae2.transaction_date desc   ) as last_amount_paid,   (    SELECT     SUM(bae1.amount_in_cents)    FROM     business_account ba1     JOIN business_account_entry bae1 ON bae1.business_account_id = ba1.business_account_id    WHERE      ba1.intermediary_code = ba.intermediary_code     AND bae1.business_account_entry_status = 'BAES03'      AND ba1.business_account_status NOT IN ('BAS03')    GROUP BY     ba1.intermediary_code   ) as total_paid  FROM   business_account ba   JOIN business_account_entry bae ON bae.business_account_id = ba.business_account_id  WHERE    bae.business_account_entry_status = 'BAES03'   AND ba.business_account_status NOT IN ('BAS03')  GROUP BY   ba.intermediary_code;
CREATE VIEW vw_intermediary_recon AS    select  t.intermediary_code, t.cut_off_period, t.process_cut_off_date,      sum(t.payment_amount_in_cents) as payment_amount_in_cents,      sum(t.statement_amount_in_cents) as statement_amount_in_cents,     sum(t.financial_closing_balance_in_cents) as financial_closing_balance_in_cents,      sum(t.statement_closing_balance_in_cents) as statement_closing_balance_in_cents    from     (select      pr.intermediary_code,      pr.cut_off_period,      pr.process_cut_off_date,      pr.payment_amount_in_cents * -1 as payment_amount_in_cents,      pr.statement_amount_in_cents * -1 as statement_amount_in_cents,      null as financial_closing_balance_in_cents,      null as statement_closing_balance_in_cents     from payment_recon pr     where pr.cut_off_period > DATEADD(month, -3, GETDATE())         union all         select      br.intermediary_code,            br.cut_off_period,            br.process_cut_off_date,            null as payment_amount_in_cents,            null as statement_amount_in_cents,            br.financial_closing_balance_in_cents * -1 as financial_closing_balance_in_cents,            br.statement_closing_balance_in_cents * -1 as statement_closing_balance_in_cents     from balance_recon br     where br.cut_off_period > DATEADD(month, -3, GETDATE())     ) as t     group by t.intermediary_code, t.cut_off_period, t.process_cut_off_date;
CREATE VIEW [dbo].[vw_payment_adjustment] AS   select pa.intermediary_code,       pa.cut_off_date as cut_off_period,       pa.adjustment as adjustment_amount,       pa.new_transfer_amount as payable_amount, adjustment_status,       ps.process_cut_off_date   from payment_adjustment pa   join payment_detail pd on pd.payment_detail_id = pa.payment_detail_id   join business_transaction bt on bt.business_transaction_id = pd.business_transaction_id   join payment_schedule ps on ps.schedule_id = bt.schedule_id;
CREATE VIEW vw_debt_detail AS    select dm.intermediary_code,      dm.debt_date,      dm.ceded_to_debt_collector,      case when dcd1.ceded_date is not null then dcd1.ceded_date else dcd3.ceded_date end as ceded_date,      case when dcd1.ceded_back_date is not null then dcd1.ceded_back_date else dcd3.ceded_back_date end as ceded_back_date,      dcd.debt_collector_reference,      case when dc2.debt_collector_name is not null then dc2.debt_collector_name else dc4.debt_collector_name end as debt_collector_name,      dc.fax_number,      dc.email_address,      dbd.bank_account_holder,      dbd.account_number,      dbd.account_type,      dbd.bank_name,      dbd.branch_code,      dm.in_process_of_write_off,      dwo.write_off_status,      dwo.write_off_type,      dmaa.administration_area_code,      tip.nett_balance_in_cents,      dra.repayment_agreement_amount    from debt_management dm       left outer join debt_cession_detail dcd on  dm.debt_management_id = dcd.debt_management_id and  dcd.cession_status  = 'CEDED'               left outer join debt_collector dc on  dcd.debt_collector_id = dc.debt_collector_id                left outer join debt_cession_detail dcd1 on  dm.debt_management_id = dcd1.debt_management_id and                         dcd1.cession_detail_id = (select top 1 dcd2.cession_detail_id from debt_cession_detail dcd2                join debt_collector dc1 on  dcd1.debt_collector_id = dc1.debt_collector_id and dc1.debt_collector_type = 'EXTERNAL'               where dcd2.debt_management_id = dm.debt_management_id and dcd2.cession_status = 'CEDED_BACK'               order by dcd2.created_timestamp desc)      left outer join debt_collector dc2 on dc2.debt_collector_id = dcd1.debt_collector_id       left outer join debt_cession_detail dcd3 on  dm.debt_management_id = dcd3.debt_management_id and                         dcd3.cession_detail_id = (select top 1 dcd4.cession_detail_id from debt_cession_detail dcd4                join debt_collector dc3 on  dcd4.debt_collector_id = dc3.debt_collector_id and dc3.debt_collector_type = 'EXTERNAL'               where dcd4.debt_management_id = dm.debt_management_id and dcd4.cession_status = 'CEDED'               order by dcd4.created_timestamp desc)      left outer join debt_collector dc4 on dc4.debt_collector_id = dcd3.debt_collector_id                left outer join debt_bank_detail dbd on dc.bank_detail_id = dbd.bank_detail_id      left outer join debt_write_off dwo on dwo.write_off_id = (select top 1 dwo1.write_off_id from debt_write_off dwo1                     where dwo1.debt_management_id = dm.debt_management_id and                      dwo1.write_off_status != 'INACTIVE' order by dwo1.created_timestamp desc)               left outer join debt_management_administration_area dmaa on dm.debt_management_id = dmaa.debt_management_id and dmaa.mngmt_status = 'ACTIVE'               left outer join tmp_intermediary_profile tip on dm.intermediary_code = tip.intermediary_code               left outer join debt_repayment_agreement dra on dra.debt_management_id = dm.debt_management_id and  dra.repayment_agreement_status = 'ACTIVE'     where dm.debt_management_status = 'ACTIVE';
CREATE VIEW vw_financial_transaction_not_payable_to_intermediary AS   SELECT    a.intermediary_code,    a.ledger,    ae.amount_in_cents * -1 as amount_in_cents,    ft.cut_off_date AS cut_off_period,    ft.transaction_date,    ft.run_date,    ft.description,    be.source_system,    be.source_system_reference,    ft.transaction_category_id AS transaction_category,    be.calculated_vat_applicable_indicator as vat_applicable_indicator,    CASE      WHEN ae.amount_in_cents < 0 THEN be.calculated_vat_amount_in_cents        ELSE be.calculated_vat_amount_in_cents * -1     END as vat_amount_in_cents,    be.retroactive_vat_indicator,    ber.is_manual_transaction_event,    be.business_event_type,      a.sub_account_number,    be.capture_timestamp, ae.gl_account, ae.financial_transaction_id    FROM account a    JOIN account_entry ae ON ae.account_id = a.account_id        AND ae.amount_in_cents < 0    JOIN financial_transaction ft on ft.financial_transaction_id = ae.financial_transaction_id        AND ft.transaction_category_id in (244, 245) and ft.description not like 'FoF-%'    JOIN business_event be on be.business_event_id = ft.business_event_id    JOIN business_event_reference ber on be.business_event_type = ber.business_event_type    WHERE ft.cut_off_date >= DATEADD(month, -3, GETDATE());
CREATE VIEW [dbo].[vw_payment_schedule]  as select   case when payment_category != 'CUSTOM'    then dateadd(dd,-1, schedule_run_date)    else schedule_run_date   end as schedule_run_date,   schedule_payment_date,   payment_category,   payment_schedule_type,   process_cut_off_date  from payment_schedule   where status != 'CANCELLED';
CREATE VIEW [dbo].[vw_deposit] AS   SELECT be.intermediary_code, be.cut_off_period, be.transaction_date As deposit_date,        ae.amount_in_cents * -1 as amount_in_cents, ft.run_date,    CASE betpg.processing_group     WHEN '[DEPOSIT]' THEN 'DEPOSIT'    WHEN '[DEPOSIT_REVERSAL]' THEN 'DEPOSIT_REVERSAL'    WHEN '[INTER_ACCOUNT_TRANSFER]' THEN 'DEPOSIT'    WHEN '[INTER_ACCOUNT_TRANSFER_REVERSAL]' THEN 'DEPOSIT_REVERSAL'    WHEN '[DEBIT_ORDER]' THEN 'DEBIT_ORDER'    WHEN '[DEBIT_ORDER_REVERSAL]' THEN 'DEBIT_ORDER_REVERSAL'    ELSE 'UNDEFINED'    END as type,    ft.sundry as reference    FROM business_event_type_processing_group betpg        JOIN business_event be on be.business_event_type = betpg.business_event_type       JOIN financial_transaction ft on ft.business_event_id = be.business_event_id       JOIN account_entry ae on ae.financial_transaction_id = ft.financial_transaction_id       JOIN account a on a.account_id = ae.account_id AND a.account_number = 'GG014'   where betpg.processing_group in ( '[DEPOSIT]', '[DEPOSIT_REVERSAL]', '[INTER_ACCOUNT_TRANSFER]',     '[INTER_ACCOUNT_TRANSFER_REVERSAL]', '[DEBIT_ORDER]', '[DEBIT_ORDER_REVERSAL]');